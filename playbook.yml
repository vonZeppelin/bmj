# Tested on Armbian Buster 20.05.1
# ansible-playbook -k -i 192.168.0.111, playbook.yml
---
- hosts: all
  user: root
  vars:
    ansible_python_interpreter: python3
    bmj_domain: mybmj.duckdns.org
  vars_prompt:
    - name: icecast_password
      prompt: "Icecast password"
  tasks:
  - name: Configure hardware
    block:
      - copy:
          content: 'blacklist xradio_wlan'
          dest: /etc/modprobe.d/blacklist-xradio.conf
      - replace:
          path: /boot/armbianEnv.txt
          regexp: ^(overlays=(?:(?!cir).)*)$
          replace: \1 cir
  - name: Add Mopidy repo
    block:
      - apt_key:
          url: https://apt.mopidy.com/mopidy.gpg
          state: present
      - apt_repository:
          repo: '{{ item }}'
          state: present
          filename: mopidy
        loop:
          - deb http://apt.mopidy.com/ buster main contrib non-free
          - deb-src http://apt.mopidy.com/ buster main contrib non-free
  - name: Install required packages
    apt:
      name:
        - certbot=0.31.*
        - eject=2.1.*
        - gstreamer1.0-alsa
        - gstreamer1.0-plugins-bad
        - icecast2=2.4.*
        - ir-keytable=1.16.*
        - lighttpd=1.4.*
        - lighttpd-mod-authn-pam=1.4.*
        - mopidy=3.0.*
        - mopidy-dleyna=2.0.*
        - mopidy-mpd=3.0.*
        - mpc=0.31-*
        - pulseaudio=12.2-*
        - pulseaudio-module-bluetooth
        - pulseaudio-module-raop
        - python3-dev
        - python3-lxml # required for XML manipulation by Ansible
        - python3-pip
        - python3-setuptools
      update_cache: yes
      cache_valid_time: 3600
  - name: Install additional Python modules
    pip:
      name:
        - https://github.com/vonZeppelin/inputexec/archive/13be691.zip
        - https://github.com/vonZeppelin/mopidy-cd/archive/04b9dfa.zip
        - mopidy-mobile~=1.9
        - mopidy-ydisk~=0.2
      state: latest
      executable: pip3
  - name: Configure Pulseaudio
    block:
      - user:
          name: pulse
          groups: bluetooth
          append: yes
      - blockinfile:
          path: '/etc/pulse/{{ item.file }}'
          marker: '{{ item.marker }}'
          block: '{{ item.block }}'
        loop:
          - file: daemon.conf
            marker: '; {mark} MANAGED BLOCK'
            block: |
              allow-exit = no
              avoid-resampling = yes
              log-target = journal
              realtime-scheduling = no
              resample-method = soxr-vhq
          - file: system.pa
            marker: '# {mark} MANAGED BLOCK'
            block: |
              load-module module-bluetooth-discover
              load-module module-raop-discover
              load-module module-switch-on-connect
      - copy:
          src: conf/pulseaudio.service
          dest: /etc/systemd/system/
      - systemd:
          name: pulseaudio
          enabled: yes
          state: started
          daemon_reload: yes
  - pause:
      prompt: "Make sure DDNS record and firewall rule have up-to-date IP address!"
  - name: Configure Lighttpd
    block:
      - user:
          name: www-data
          groups: shadow
          append: yes
      - service:
          name: lighttpd
          state: started
      - shell: >-
          certbot certonly --agree-tos --noninteractive
          --email leonid_bogdanov@mail.ru
          --webroot --webroot-path /var/www/html/
          --domain {{ bmj_domain }}
      - template:
          src: 'conf/lighttpd/{{ item.src }}'
          dest: '{{ item.dest }}'
          mode: '{{ item.mode | default(omit) }}'
        loop:
          - src: http.pam
            dest: /etc/pam.d/http
          - src: index.html
            dest: /var/www/html
          - src: reload-lighttpd.sh
            dest: /etc/letsencrypt/renewal-hooks/deploy/
            mode: 744
      - template:
          src: '{{ item }}'
          dest: /etc/lighttpd/conf-enabled/
          mode: 0400
        with_fileglob:
          - conf/lighttpd/*.conf
      - service:
          name: lighttpd
          enabled: yes
          state: restarted
  - name: Configure Icecast
    block:
      - copy:
          src: '{{ item }}'
          dest: /usr/share/icecast2/web/
          owner: icecast2
          group: icecast
        with_fileglob:
          - conf/icecast/silence.*
      - xml:
          path: /etc/icecast2/icecast.xml
          xpath: '/icecast/{{ item.key }}'
          value: '{{ item.value }}'
          pretty_print: yes
        with_dict:
          location: BMJ
          admin: 'admin@{{ bmj_domain }}'
          limits/clients: 5
          authentication/source-password: '{{ icecast_password }}'
          authentication/relay-password: '{{ icecast_password }}'
          authentication/admin-password: '{{ icecast_password }}'
          hostname: '{{ bmj_domain }}'
          listen-socket/bind-address: ::
          mount/mount-name: /bmj.mp3
          mount/fallback-mount: /silence.mp3
          mount/fallback-override: 1
      - service:
          name: icecast2
          enabled: yes
          state: started
  - name: Configure Mopidy
    block:
      - user:
          name: mopidy
          groups:
            - cdrom
            - pulse-access
          append: yes
      - ini_file:
          path: /etc/mopidy/mopidy.conf
          section: '{{ item.section }}'
          option: '{{ item.option }}'
          value: '{{ item.value }}'
        loop:
          - { section: audio, option: mixer_volume, value: 20 }
          - section: audio
            option: output
            value: >-
              tee name=t !
              queue ! autoaudiosink t. !
              queue ! lamemp3enc target=quality quality=0 ! shout2send streamname=bmj description=bmj mount=bmj.mp3 password={{ icecast_password }} async=false
          - { section: file, option: enabled, value: false }
          - { section: http, option: default_app, value: mobile }
          - { section: http, option: hostname, value: 0.0.0.0 }
          - { section: mpd, option: hostname, value: 0.0.0.0 }
          - { section: stream, option: timeout, value: 15000 }
      - copy:
          src: '{{ item }}'
          dest: /var/lib/mopidy/m3u/
          owner: mopidy
          group: audio
        with_fileglob:
          - conf/playlists/*.m3u
      - service:
          name: mopidy
          enabled: yes
          state: started
  - name: Configure Remote Control
    block:
      - user:
          name: inputexec
          groups:
            - bluetooth
            - cdrom
            - input
          create_home: no
      - replace:
          path: /lib/udev/rules.d/60-ir-keytable.rules
          regexp: ^.+name"$
          replace: 'ACTION=="add", SUBSYSTEM=="input", SUBSYSTEMS=="rc", KERNEL=="event*", ENV{.rc_sysdev}="$id", RUN+="/usr/bin/ir-keytable -a /etc/rc_maps.cfg -s $env{.rc_sysdev}"'
      - lineinfile:
          path: /etc/rc_maps.cfg
          line: sunxi-ir rc-empty total_media_in_hand_02.toml
      - file:
          src: /lib/udev/rc_keymaps/total_media_in_hand_02.toml
          dest: /etc/rc_keymaps/total_media_in_hand_02.toml
          state: link
      - copy:
          src: 'conf/inputexec/{{ item.src }}'
          dest: '{{ item.dest }}'
          owner: '{{ item.owner | default(omit) }}'
          group: '{{ item.group | default(omit) }}'
          mode: '{{ item.mode | default(omit) }}'
        loop:
          - { src: inputexec.service, dest: /etc/systemd/system/ }
          - { src: inputexec.cfg, dest: /etc/inputexec/, owner: inputexec, group: input }
          - { src: dev_rot.py, dest: /etc/inputexec/, owner: inputexec, group: input, mode: 744 }
      - copy:
          content: >
            inputexec ALL= NOPASSWD: /bin/bash
          dest: /etc/sudoers.d/inputexec
      - systemd:
          name: inputexec
          enabled: yes
          state: started
          daemon_reload: yes
  - name: Configure VirtualHere
    block:
      - get_url:
          url: https://virtualhere.com/sites/default/files/usbserver/vhusbdarm
          dest: /usr/bin/vhusbd
          mode: 0744
      - copy:
          src: 'conf/virtualhere/{{ item.src }}'
          dest: '{{ item.dest }}'
        loop:
          - { src: virtualhere.service, dest: /etc/systemd/system/ }
          - { src: virtualhere.cfg, dest: /etc/virtualhere.cfg }
      - systemd:
          name: virtualhere
          enabled: yes
          state: started
          daemon_reload: yes
